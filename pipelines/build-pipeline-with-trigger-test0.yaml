apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-pipeline-test0
spec:
  params:
    - name: url
      description: app code git url 
    - name: IMAGE
      description: nexus docker image full path
    # - name: CONTEXT_DIR
    #   description: source code build path
      # default: standalone
      # type: string
    - name: CONTEXT
      description: file check path
      default: "."
      type: string
    - name: revision
      description: tag,branch,commit_number
      type: string
      default: develop
    - name: SERVICE_NAME
      description: service name == deployment name
      default: changeme
  workspaces:
    - name: maven-settings
      description: maven settings provided as configMap
    # - name: newman-env
    #   description: newman settings provided as configMap
    - name: source
      description: pvc provided as shared workspace between tasks
  tasks:
    - name: get-code
      taskRef:
        name: git-clone
      params:
        - name: url
          value: "$(params.url)"
        - name: revision
          value: "$(params.revision)"
      workspaces:
        - name: source
          workspace: source
    - name: build-type-check
      taskRef:
        name: build-type-check
      params:
        - name: CONTEXT
          value: "$(params.CONTEXT)"
      runAfter:
        - get-code
      workspaces:
        - name: source
          workspace: source
    - name: maven-build-lib
      taskRef:
        name: maven
      runAfter:
        - build-type-check
      workspaces:
        - name: source
          workspace: source
        - name: maven-settings
          workspace: maven-settings
      params:
        - name: CONTEXT_DIR
          value: $(tasks.build-type-check.results.shared-check)
          # value: "."
        - name: GOALS
          value: 
            - -DskipTests
            - deploy
      when:
        - input: "$(tasks.build-type-check.results.shared-check)"
          operator: in
          values: ["shared","."]
    - name: maven-build-app
      taskRef:
        name: maven
      runAfter:
        - build-type-check
      workspaces:
        - name: source
          workspace: source
        - name: maven-settings
          workspace: maven-settings
      params:
        - name: CONTEXT_DIR
          value: $(tasks.build-type-check.results.standalone-check)
        - name: GOALS
          value: 
            - -DskipTests
            - clean
            - install
      when:
        - input: "$(tasks.build-type-check.results.standalone-check)"
          operator: in
          values: ["standalone"]
    - name: npm-build-app
      taskRef:
        name: npm
      runAfter:
        - get-code
      workspaces:
        - name: source
          workspace: source
      params:
        - name: CONTEXT_DIR
          value: $(tasks.build-type-check.results.nodejs-check)
      when:
        - input: "$(tasks.build-type-check.results.nodejs-check)"
          operator: in
          values: ["."]
    - name: maven-build-id
      when:
        - input: "$(tasks.build-type-check.results.standalone-check)"
          operator: in
          values: ["standalone"]
      taskRef:
        name: generate-build-id-check
      runAfter:
        - maven-build-app
      params:
        - name: CONTEXT_DIR
          value: "$(tasks.build-type-check.results.standalone-check)"
      workspaces:
        - name: source
          workspace: source
    - name: nodejs-build-id
      when:
        - input: "$(tasks.build-type-check.results.nodejs-check)"
          operator: in
          values: ["."]
      taskRef:
        name: generate-build-id-check
      runAfter:
        - npm-build-app
      params:
        - name: CONTEXT_DIR
          value: "$(tasks.build-type-check.results.nodejs-check)"
      workspaces:
        - name: source
          workspace: source
    - name: build-spring-docker-image
      taskRef: 
        name: buildah
      runAfter:
        - maven-build-id
      params:
        - name: IMAGE
          value: "$(params.IMAGE):$(tasks.maven-build-id.results.build-id)"
      workspaces:
        - name: source
          workspace: source
    - name: build-nodejs-docker-image
      taskRef: 
        name: buildah
      runAfter:
        - nodejs-build-id
      params:
        - name: IMAGE
          value: "$(params.IMAGE):$(tasks.nodejs-build-id.results.build-id)"
      workspaces:
        - name: source
          workspace: source
    - name: springboot-helm-chart
      when:
        - input: "$(tasks.build-type-check.results.standalone-check)"
          operator: in
          values: ["standalone"]
      taskRef:
        name: helm
      runAfter:
        - build-spring-docker-image
      params:
        - name: IMAGE
          value: "$(params.IMAGE)"
        - name: TAG
          value: "$(tasks.maven-build-id.results.build-id)"
        - name: SERVICE_NAME
          value: "$(params.SERVICE_NAME)"
      workspaces:
        - name: source
          workspace: source
    - name: nodejs-helm-chart
      when:
        - input: "$(tasks.build-type-check.results.nodejs-check)"
          operator: in
          values: ["."]
      taskRef:
        name: helm
      runAfter:
        - build-nodejs-docker-image
      params:
        - name: IMAGE
          value: "$(params.IMAGE)"
        - name: TAG
          value: "$(tasks.nodejs-build-id.results.build-id)"
        - name: SERVICE_NAME
          value: "$(params.SERVICE_NAME)"
        - name: CHART_CONTEXT_DIR
          value: "$(tasks.build-type-check.results.chart-template)"
        #   value: "$(params.CHART_CONTEXT_DIR)"
      workspaces:
        - name: source
          workspace: source
    - name: postman-tests
      when:
        - input: "$(tasks.build-type-check.results.nodejs-check)"
          operator: in
          values: ["disabled"]
      taskRef:
        name: newman
      runAfter:
        - springboot-helm-chart
      params:
        - name: COLLECTION
          value: "$(params.SERVICE_NAME).json"
      workspaces:
        - name: source
          workspace: source
  finally:
    - name: cleanup-tmp-ns
      when:
        - input: "$(tasks.build-type-check.results.standalone-check)"
          operator: in
          values: ["standalone"]
      taskRef:
        name: cleanup
      params:
        - name: SERVICE_NAME
          value: "$(params.SERVICE_NAME)"
      workspaces:
        - name: source
          workspace: source